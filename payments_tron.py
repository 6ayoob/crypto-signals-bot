# payments_tron.py โ ุชุญูู ุชููุงุฆู ูู ุฏูุนุงุช USDT ุนูู TRON (TRC20) ุจุงุณุชุฎุฏุงู "ุฑูู ุงููุฑุฌุน (TxID)"
# - ูุฏุนู ูุตู ุฑูู ุงููุฑุฌุน ูุจุงุดุฑุฉ ุฃู ุฑุงุจุท Tronscan/TronLink ูุงุณุชุฎุฑุงุฌ ุงูู TxID ุชููุงุฆูุงู.
# - ูุนุชูุฏ TronGrid API (ููุถูู ูุถุน TRONGRID_API_KEY ูุชูุงุฏู ุญุฏูุฏ ุงููุนุฏู).
# - ุฅู ูู ุชุญุฏุฏ ุนูุฏ USDT ูู env ุณูุทุงุจู ุจุงูุฑูุฒ "USDT".
#
# ุจูุฆุฉ ุงูุชุดุบูู (Environment):
#   TRONGRID_BASE          (ุงุฎุชูุงุฑู) ุงูุชุฑุงุถูุงู https://api.trongrid.io
#   TRONGRID_API_KEY       (ุงุฎุชูุงุฑู ูููู ููุณุชุญุณู)
#   USDT_TRC20_CONTRACT    (ุงุฎุชูุงุฑู) ุฅู ูุถุนุชู ุณูุทุงุจู ุจุงูุนูุฏ ุจุฏูุงู ูู ุงูุฑูุฒ
#   USDT_TRC20_WALLET      (ูุทููุจ)  ูุญูุธุชู ุนูู TRON ููุชุญูู ุงูุฅูุฏุงุน ุฅูููุง
#   TRONGRID_TIMEOUT       (ุงุฎุชูุงุฑู) ูููุฉ ุงูุทูุจ ุจุงูุซูุงููุ ุงูุชุฑุงุถูุงู 15
#   TRON_MIN_CONF          (ุงุฎุชูุงุฑู) ุญุฏ ุฃุฏูู ููุชุฃููุฏุงุชุ ุงูุชุฑุงุถูุงู 0 (ุชุฑูู ุบุงูุจุงู ููุฑู)
#
# ูุงุฌูุฉ ุงูุงุณุชุฏุนุงุก ูู ุงูุจูุช:
#   ok, info = find_trc20_transfer_to_me(ref_or_url, min_amount)
#   - ok=True  => ุชู ุงูุนุซูุฑ ุนูู ุชุญููู ุตุงูุญุ info = "ุงููุจูุบ ุงููุณุชูู"
#   - ok=False => ูุดู ุงูุชุญููุ info = ุณุจุจ ูุงุถุญ ุจุงูุนุฑุจูุฉ ูููุณุชุฎุฏู/ุงูุฃุฏูู

import os
import re
import requests
from typing import Optional, Tuple

TRONGRID_BASE = os.getenv("TRONGRID_BASE", "https://api.trongrid.io")
TRONGRID_API_KEY = os.getenv("TRONGRID_API_KEY")
USDT_CONTRACT = os.getenv("USDT_TRC20_CONTRACT", "")  # ุฅู ุชูุฑู ูุงุฑุบุงู ุณูุทุงุจู ุจุงูุฑูุฒ "USDT"
RECEIVER_WALLET = os.getenv("USDT_TRC20_WALLET")      # ูุญูุธุชู โ ูุทููุจ
TIMEOUT = int(os.getenv("TRONGRID_TIMEOUT", "15"))
MIN_CONF = int(os.getenv("TRON_MIN_CONF", "0"))

# ุชุทุงุจู ุฃู ุณูุงุณู TxID ุณุฏุงุณูุฉ ุจุทูู 64 ุญุชู ูู ุถูู ุฑุงุจุท
_TXID_RE = re.compile(r"(?i)\b([A-F0-9]{64})\b")

def _headers() -> dict:
    hdr = {"Accept": "application/json"}
    if TRONGRID_API_KEY:
        hdr["TRON-PRO-API-KEY"] = TRONGRID_API_KEY
    return hdr

def extract_txid(ref_or_url: str) -> Optional[str]:
    """
    ูุณุชุฎุฑุฌ ุฑูู ุงููุฑุฌุน (TxID) ูู ูุตู/ุฑุงุจุท ูุงู ุงููุณุชุฎุฏู ุจูุตูู (Tronscan / TronLink / ูุต ุฎุงู).
    ุฃูุซูุฉ ูุฏุนููุฉ:
      - 7F3D...ABCD (64 hex)
      - https://tronscan.org/#/transaction/<txid>
      - tronlink://transaction?hash=<txid>
    """
    if not ref_or_url:
        return None
    m = _TXID_RE.search(ref_or_url.strip())
    return m.group(1) if m else None

def get_tx(txid: str) -> Optional[dict]:
    """
    ูุฌูุจ ุชูุงุตูู ูุนุงููุฉ ุนุจุฑ TronGrid:
      GET /v1/transactions/{txid}
    ูุฑุฌุน dict ูููุนุงููุฉ ุฃู None ุฅู ูู ุชูุฌุฏ.
    """
    url = f"{TRONGRID_BASE}/v1/transactions/{txid}"
    r = requests.get(url, timeout=TIMEOUT, headers=_headers())
    r.raise_for_status()
    data = r.json()
    arr = data.get("data") if isinstance(data, dict) else None
    return arr[0] if arr else None

def _ok_symbol_or_contract(ev: dict) -> bool:
    """
    ูุทุงุจู ููุน ุงูุฃุตู: ุฅููุง ููู ุนูุฏ USDT ุงููุญุฏูุฏุ ุฃู ุจูุงุณุทุฉ ุงูุฑูุฒ "USDT" ุฅู ูู ููุญุฏููุฏ ุนูุฏ.
    """
    contract = ev.get("contract_address")
    symbol = (ev.get("symbol") or "").upper()
    if USDT_CONTRACT:
        return contract == USDT_CONTRACT
    return symbol == "USDT"

def _amount_from_event(ev: dict) -> Optional[float]:
    """
    ูุญุณุจ ุงููุจูุบ ุงููุนูู ูู ุณุฌูู ุชุญููู TRC20 ููู ุงูุญููู ุงููุชุงุญุฉ.
    """
    try:
        decimals = int(ev.get("decimals") or 6)
        raw_val = ev.get("amount_str") or ev.get("amount") or "0"
        return float(raw_val) / (10 ** decimals)
    except Exception:
        return None

def _enough_confirmations(tx: dict) -> bool:
    """
    TRON ุนุงุฏุฉู ูุคูุฏ ุจุณุฑุนุฉ ูุชุธูุฑ ุงูุญุงูุฉ SUCCESS.
    ุฅู ุฑุบุจุช ุจุงูุชุญูู ูู ุงูุงุฑุชูุงุน ุฅูู ุนุฏุฏ ุชุฃููุฏุงุช ูุนูููุ ูููู ุงุณุชุฎุฏุงู block/confirmation_count ูู ุชููุฑ.
    ููุง ููุชูู ุจู MIN_CONF == 0 (ุงูุชุฑุงุถูุงู).
    """
    if MIN_CONF <= 0:
        return True
    # ุฅู ุชููุฑ ุญููู ุชุฃููุฏุงุช ูุณุชูุจูุงู ูููู ุฅุถุงูุชูุง ููุง.
    return True

def find_trc20_transfer_to_me(ref_or_url: str, min_amount: float) -> Tuple[bool, str]:
    """
    ุงูุชุญูู ุฃู ุงููุนุงููุฉ ุจุงูู ยซุฑูู ุงููุฑุฌุน (TxID)ยป ุชููุช ุจูุฌุงุญ ูุชุญูู ุชุญููู USDT TRC20 ุฅูู ูุญูุธุชูุง ุจุงููุจูุบ ุงููุทููุจ.
    ุชุฑุฌุน (ok, info):
      - ok=True  => info = ุงููุจูุบ ุงููุณุชูู ููุต
      - ok=False => info = ุณุจุจ ุงููุดู (ุฑุณุงูุฉ ุนุฑุจูุฉ ูุงุถุญุฉ)
    """
    if not RECEIVER_WALLET:
        return False, "ุงููุญูุธุฉ ุบูุฑ ูููุฃุฉ ูุฏู ุงูุฎุงุฏู. ุงูุฑุฌุงุก ุฅุจูุงุบ ุงูุฏุนู (USDT_TRC20_WALLET ููููุฏ)."

    txid = extract_txid(ref_or_url)
    if not txid:
        return False, "ูู ุฃููู ยซุฑูู ุงููุฑุฌุนยป. ุฃุฑุณู ุฑูู ุงููุฑุฌุน ุงูููููู ูู 64 ุฑูุฒุงู (ุฃู ุฃุฑุณู ุฑุงุจุท ุงููุนุงููุฉ ูู Tronscan)."

    try:
        tx = get_tx(txid)
    except requests.HTTPError as e:
        return False, f"ุชุนุฐูุฑ ุงูุงุชุตุงู ุจูุงุฌูุฉ TRON (HTTP {e.response.status_code}). ุฌุฑูุจ ุจุนุฏ ูููู ุฃู ุชุฃูุฏ ูู ุฑูู ุงููุฑุฌุน."
    except Exception as e:
        return False, f"ูุดู ุงูุงุชุตุงู ุจูุงุฌูุฉ TRON: {e}"

    if not tx:
        return False, "ูู ุฃุฌุฏ ูุนุงููุฉ ุจูุฐุง ยซุฑูู ุงููุฑุฌุนยป. ุชุฃูุฏ ูู ูุณุฎู ุจุดูู ุตุญูุญ ุฃู ุฃุฑุณู ุฑุงุจุท Tronscan ูููุนุงููุฉ."

    # ุญุงูุฉ ุงูุชูููุฐ
    ret = tx.get("ret") or []
    if not ret or ret[0].get("contractRet") != "SUCCESS":
        return False, "ุงููุนุงููุฉ ููุณุช ูุงุฌุญุฉ ุจุนุฏ (ูุฏ ุชููู ููุฏ ุงูุชูููุฐ). ุฃุนุฏ ุงููุญุงููุฉ ูุงุญูุงู."

    if not _enough_confirmations(tx):
        return False, "ุงููุนุงููุฉ ุฑูุตุฏุช ูููู ููุชุธุฑ ูุฒูุฏุงู ูู ุงูุชุฃููุฏุงุช ุนูู ุงูุดุจูุฉ."

    # ุงุจุญุซ ุนู ุณุฌูุงุช ุชุญููู TRC20 ุฏุงุฎู ุงููุนุงููุฉ
    trc20_list = tx.get("trc20TransferInfo") or tx.get("tokenTransferInfo") or []
    if not trc20_list:
        return False, "ูุง ุชูุฌุฏ ุณุฌูุงุช ุชุญููู TRC20 ูู ูุฐู ุงููุนุงููุฉ. ุชุฃูุฏ ุฃูู ุฃุฑุณูุช USDT (TRC20)."

    for ev in trc20_list:
        to_addr = ev.get("to_address")
        if not _ok_symbol_or_contract(ev):
            continue
        if to_addr != RECEIVER_WALLET:
            continue

        amount = _amount_from_event(ev)
        if amount is None:
            continue

        if amount + 1e-9 >= float(min_amount):
            # ูุฌุงุญ
            return True, f"{amount:.6f}"

    return False, "ูู ุฃุนุซุฑ ุนูู ุฅูุฏุงุน USDT ุตุงูุญ ุฅูู ูุญูุธุชูุง ุจูุฐู ุงููุนุงููุฉ ูุจุงููุจูุบ ุงููุทููุจ."

# ููุงุญุธุฉ: ูุฅุธูุงุฑ ุชูููุญ ูุฏูู ูู ูุงุฌูุงุช ุงูุจูุช:
REFERENCE_HINT = (
    "๐ *ุฑูู ุงููุฑุฌุน (TxID)* ูู ุฑูู ููููู ูู 64 ุฑูุฒุงู ูููููุฒ ุชุญูููู ุนูู ุดุจูุฉ TRON.\n"
    "ููููู ูุณุฎู ูู ูุญูุธุชู (TronLink/Trust/Tronscan) ุฃู ุฅูุตุงู ุฑุงุจุท ุงููุนุงููุฉ ููุงุ ูุณุฃูุชูุทู ุชููุงุฆูุงู."
)
